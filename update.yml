---
- name: Divide hosts into new groups with max 10 hosts per group
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Find Shared servers
      set_fact:
        common_hosts: "{{ groups['device_roles_VM'] }}"

    - name: Add hosts to new groups
      set_fact:
        current_group: "shared_update_group_{{ item }}"
      loop: "{{ common_hosts }}"
      loop_control:
        loop_var: item

    - name: Add hosts to dynamic inventory
      add_host:
        name: "{{ item }}"
        groups: "{{ current_group }}"
      loop: "{{ common_hosts }}"
      loop_control:
        loop_var: item

- name: Run tasks on new groups
  hosts: shared_update_group_*
  gather_facts: yes
  serial: 5
  vars:
    netbox_api_key: 669263d51c8bb6661cdd3d1ffacd55792ba05c06
  tasks:
    - name: Retrieve licenses from Netbox
      uri:
        url: http://10.10.10.7/api/dcim/device-roles/?name=VM
        method: GET
        validate_certs: no
        headers:
          Authorization: Token {{netbox_api_key}}
          Content-Type: "application/json"
        status_code: 200
      register: netbox_api_output
      delegate_to: 127.0.0.1
      run_once: true
#
#   - name: Get Plesk version from Netbox
#     set_fact:
#       plesk_release_id: "{{ netbox_api_output.json.results[0].custom_fields.Plesk_release_id }}"
#       plesk_update: "{{ netbox_api_output.json.results[0].custom_fields.Plesk_update }}"
#     run_once: true
#
#   - name: Get Plesk version for upgrade
#     shell: "plesk -v"
#     register: local_plesk_output
#
#   - name: Extract Plesk version
#     set_fact:
#       local_plesk_version: "{{ local_plesk_output.stdout | regex_findall('Plesk Obsidian ([\\d.]+)') | first }}"
#
#   - name: Remove the update from Plesk version
#     set_fact:
#       local_plesk_version: "{{ local_plesk_version | regex_replace('\\.\\d$', '') }}"
#
#   - name: Transform output to Plesk installer version
#     set_fact:
#       plesk_transformed_version: "PLESK_{{ local_plesk_version | regex_replace('\\.', '_') }}"
#
#   - name: Update Plesk when version mismatch
#     when: plesk_transformed_version != plesk_release_id
#     block:
#       - name: Update plesk to newest version
#         shell: plesk installer upgrade {{plesk_release_id}}
#
#   - name: Get Plesk version for update
#     shell: "plesk -v"
#     register: local_plesk_update_output
#
#   - name: Extract Plesk version
#     set_fact:
#       local_plesk_update_version: "{{ local_plesk_update_output.stdout | regex_findall('Plesk Obsidian \\d+\\.\\d+\\.\\d+\\.([\\d]+)') | first }}"
#
#   - name: Update Plesk when version mismatch
#     when: local_plesk_update_version != plesk_update
#     block:
#       - name: Update plesk to newest update
#         shell: plesk installer update --panel-only
#
#   - name: Pause for 5 minutes
#     pause:
#       seconds: 300
